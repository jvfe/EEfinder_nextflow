#!/usr/bin/env python

import re, csv
import argparse

def get_final_taxonomy(bed_formated, taxonomy_info) -> None:
    with open(bed_formated, "r") as bed_merge_file, open(
        f"{bed_formated}.fa.tax", "w"
    ) as bed_merge_tax_out:
        bed_merge_tax_list = []
        bed_merge_file_reader = csv.reader(bed_merge_file, delimiter="\t")
        bed_merge_tax_out_writer = csv.writer(bed_merge_tax_out, delimiter="\t")
        bed_merge_tax_out_writer.writerow(
            [
                "Element-ID",
                "Sense",
                "Protein-IDs",
                "Protein-Products",
                "Molecule_type",
                "Family",
                "Genus",
                "Species",
                "Host",
            ]
        )
        for line in bed_merge_file_reader:
            element_merged_id = (
                line[0].rstrip("\n")
                + ":"
                + line[1].strip("\n")
                + "-"
                + line[2].strip("\n")
            )
            if "pos" in line[3]:
                sense = "pos"
                line[3] = re.sub("\|pos", "", line[3]).rstrip("\n")
            elif "neg" in line[3]:
                sense = "neg"
                line[3] = re.sub("\|neg", "", line[3]).rstrip("\n")
            protein_ids = line[3].rstrip("\n")
            with open(taxonomy_info, "r") as prot_info:
                prot_info_reader = csv.reader(prot_info, delimiter=",")
                protein_terms = ""
                genus = ""
                species = ""
                host = ""
                if "AND" in protein_ids:
                    for line_prot in prot_info_reader:
                        protein_ids = re.sub("AND", "|", line[3]).rstrip("\n")
                        if line_prot[1].rstrip("\n") in protein_ids:
                            if line_prot[19].rstrip("\n") not in protein_terms:
                                protein_terms += line_prot[19] + " AND "
                                mol_type = line_prot[18]
                                family = line_prot[17]
                            if line_prot[16].rstrip("\n") not in genus:
                                genus += line_prot[16] + " AND "
                            if line_prot[15].rstrip("\n") not in species:
                                species += line_prot[15] + " AND "
                            if line_prot[20].rstrip("\n") not in host:
                                host += line_prot[20] + " AND "
                else:
                    for line_prot in prot_info_reader:
                        if line_prot[1].rstrip("\n") in protein_ids:
                            protein_terms = line_prot[19]
                            mol_type = line_prot[18]
                            family = line_prot[17]
                            genus = line_prot[16]
                            species = line_prot[15]
                            host = line_prot[20]

            protein_terms = re.sub(r" AND $", "", protein_terms)
            genus = re.sub(r" AND $", "", genus)
            species = re.sub(r" AND $", "", species)
            host = re.sub(r" AND $", "", host)
            if mol_type == "":
                vir_order = "Undefined"
            if family == "":
                family = "Unclassified"
            if genus == "":
                genus = "Unclassified"
            if species == "":
                species = "Unclassified"
            if host == "":
                host = "Undefined"

            bed_merge_tax_list.append(
                [
                    element_merged_id,
                    sense,
                    protein_ids,
                    protein_terms,
                    mol_type,
                    family,
                    genus,
                    species,
                    host,
                ]
            )
        bed_merge_tax_out_writer.writerows(bed_merge_tax_list)


parser = argparse.ArgumentParser(description="Mount taxonomy for each putative EEs.")
parser.add_argument("--bed_formated", type=str, help="bed file, generated by cut_seq function")
parser.add_argument("--taxonomy_info", type=str, help="taxonomy signature generated by get_taxonomy function")
args = parser.parse_args()
bed_formated = args.bed_formated
taxonomy_info = args.taxonomy_info

get_final_taxonomy(bed_formated, taxonomy_info)